import json
import boto3
from botocore.client import Config
import os

AWS_ACCESS_KEY = os.environ['ACCESS_KEY']
AWS_SECRET_KEY = os.environ['SECRET_KEY']
AWS_TIMESTREAM_DB = os.environ['AWS_TIMESTREAM_DB']
AWS_TABLE_NAME = os.environ['AWS_TABLE_NAME']


def aws_timestream_query():
    query_client = boto3.client(
        'timestream-query',
        aws_access_key_id= AWS_ACCESS_KEY,
        aws_secret_access_key= AWS_SECRET_KEY,
        config=Config(region_name='eu-west-1'))
    return query_client


def aws_timestream_handler(database, table, deviceName):
    query_client = aws_timestream_query()
    paginator = query_client.get_paginator("query")
    query = f"""SELECT time as Date,(BE-PD) as PeizometerElevation, Off as Offset  FROM "{database}"."{table}"
                WHERE deviceName = '{deviceName}' AND measure_name = 'peizometer_multi'"""
    response = paginator.paginate(QueryString=query)
    absValue = []
    # column_info = response['Rows']
    for page in response:
        column_info = page['Rows']
        for row in column_info:
            ans = row['Data']
            absValue.append(ans)
            # absValue.append(ans[0]['ScalarValue'])
    return absValue


def lambda_handler(event,context):
    deviceName = event['deviceName']
    final_data = aws_timestream_handler(AWS_TIMESTREAM_DB, AWS_TABLE_NAME, deviceName)
    print(final_data)
    filtered_data = [sublist for sublist in final_data if
                     not any(value['ScalarValue'] == '0.0' for value in sublist)]
    formatted_data = [
        {
            'Date': sublist[0]['ScalarValue'],
            'PeizometerElevation': sublist[1]['ScalarValue'],
            'Offset': sublist[2]['ScalarValue']
        } for sublist in filtered_data
    ]
    return {
        'statusCode': '200',
        'body': formatted_data,
        'headers': {
        'Accept': 'application/json',
        'Content-Type': 'application/json',
        'Access-Control-Allow-Origin': '*',
        'Access-Control-Allow-Methods': 'GET',
        'Access-Control-Allow-Headers': 'Content-Type, Access-Control-Allow-Headers, Authorization, X-Requested-With'
    },
    }
